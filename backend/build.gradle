plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.8"
}

checkstyle {
    maxWarnings = 0
    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppressions.xml"]
    toolVersion = "8.24"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated']
        }
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    ignoreFailures = true
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

dependencies {

    // spring boot starter data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // spring boot starter
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // jwt, password encode
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // redisson, dotenv
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.4'
    implementation 'io.github.cdimascio:dotenv-java:3.2.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    //OpenAI (챗봇 용)
    implementation 'com.theokanning.openai-gpt3-java:service:0.18.2'

    // MapStruct (DTO Entity 매핑 최적화)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // MySQL (DB)
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:1.1.11'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // WebSocket (체팅 용)
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // OAuth2 - 카카오 로그인용
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // 스케줄링
    implementation 'org.springframework.boot:spring-boot-starter'

}






